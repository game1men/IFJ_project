# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

image: gcc

build:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: false
    - if: $CI_PIPELINE_SOURCE == "push"
      allow_failure: true
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script:
  #   - apt update && apt -y install make autoconf
  before_script:
    # if moving to docker runners uncoment this:
    #- apt update && apt -y install make git python3


  script:
    - (cd IFJ-compiler && make clean)
    - (cd IFJ-compiler && make)  #creates binary
  artifacts:
    untracked: true
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"

# run tests using the binary built before
test:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      allow_failure: true
  before_script:
    - git clone  https://github.com/galloj/IFJ22_Tester #clones tests
  stage: test
  script: # || echo "tests" is there for ignoring return code
    - (cd IFJ22_Tester && ./test.py ../IFJ-compiler/compiler)  || echo ""

  # run tests using the binary built before
test2:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      allow_failure: true
  before_script:
    - git clone  https://gitlab.com/kam29/ifj-testsuite.git #clones tests
  stage: test
  script: # || echo "tests" is there for ignoring return code
    - (cd ifj-testsuite && python3 ./testsuite.py --mode-compile-only  --compiler ../IFJ-compiler/compiler)  || echo ""
    - (cd IFJ-compiler && make clean)
